{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/layouts/Layout.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/PostLink.js","webpack:///./src/pages/blog.js"],"names":["loader","enqueue","React","createContext","Layout","props","style","margin","maxWidth","children","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","PostLink","post","to","frontmatter","path","color","padding","title","date","description","status","Blog","Posts","data","allMarkdownRemark","edges","map","edge","key","node","id","paddingTop","pageQuery"],"mappings":"2FAAA,sGAcyBA,QAAOC,QAELC,IAAMC,cAAc,K,qECJhCC,IATA,SAAAC,GACb,OACE,yBAAKC,MAAO,CAAEC,OAAQ,YAAaC,SAAU,UAE3C,6BAAMH,EAAMI,a,qBCPlB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEf,IAAMgB,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV,O,0FCaIC,EAjBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,OACE,kBAAC,IAAD,CAAMC,GAAID,EAAKE,YAAYC,KAAMnB,MAAO,CAAEoB,MAAO,UAC/C,yBAAKpB,MAAO,CAAEqB,QAAS,aACrB,4BACGL,EAAKE,YAAYI,MADpB,KAC6BN,EAAKE,YAAYK,KAD9C,KAGA,2BACGP,EAAKE,YAAYM,YAClB,6BAFF,WAGWR,EAAKE,YAAYO,WCbpC,0CAqBeC,UAhBF,SAAC,GAIP,IACCC,EADF,EAHJC,KACEC,kBAAqBC,MAKpBC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAUC,IAAKD,EAAKE,KAAKC,GAAInB,KAAMgB,EAAKE,UAEvD,OACE,kBAACpC,EAAA,EAAD,KACE,yBAAKE,MAAO,CAAEoC,WAAY,UAAYT,KAX5C,IAkBaU,EAAS","file":"component---src-pages-blog-js-2514d85e2d5f7d6ffc45.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\r\nimport Menu from \"../components/Menu\"\r\n\r\nconst Layout = props => {\r\n  return (\r\n    <div style={{ margin: \"2rem auto\", maxWidth: \"600px\" }}>\r\n      {/* <Menu /> */}\r\n      <div>{props.children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst PostLink = ({ post }) => {\r\n  return (\r\n    <Link to={post.frontmatter.path} style={{ color: \"black\" }}>\r\n      <div style={{ padding: \"20px 0px\" }}>\r\n        <h2>\r\n          {post.frontmatter.title} ({post.frontmatter.date})\r\n        </h2>\r\n        <p>\r\n          {post.frontmatter.description}\r\n          <br />\r\n          Status: {post.frontmatter.status}\r\n        </p>\r\n      </div>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default PostLink\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../layouts/Layout\"\r\nimport PostLink from \"../components/PostLink\"\r\n\r\nconst Blog = ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n}) => {\r\n  const Posts = edges\r\n    // .filter(edge => edge.node.frontmatter.status === \"draft\")\r\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />)\r\n\r\n  return (\r\n    <Layout>\r\n      <div style={{ paddingTop: \"200px\" }}>{Posts}</div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Blog\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt(pruneLength: 250)\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            path\r\n            title\r\n            description\r\n            status\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}